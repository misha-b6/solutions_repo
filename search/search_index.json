{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection Step 1: Understanding Projectile Motion Projectile motion follows two independent components: 1. Horizontal Motion : Moves at constant velocity. 2. Vertical Motion : Affected by gravity. Ignoring air resistance, we assume: - Initial velocity: \\(v_0\\) - Launch angle: \\(\\theta\\) - Gravity: \\(g\\) The goal is to find how the range depends on \\(\\theta\\) . Step 2: Deriving the Equations of Motion Using kinematic equations: Horizontal Motion: Initial horizontal velocity: $$ v_{x0} = v_0\\cos(\\theta) $$ Horizontal displacement at time \\(t\\) : $$ x(t) = v_0\\cos(\\theta) t $$ Vertical Motion: Initial vertical velocity: $$ v_{y0} = v_0\\sin(\\theta) $$ Vertical displacement at time \\(t\\) : $$ y(t) = v_0\\sin(\\theta) t - \\frac{1}{2}gt^2 $$ The projectile reaches the ground when \\(y = 0\\) . Solving for \\(t\\) : \\[ t_f = \\frac{2v_0\\sin(\\theta)}{g}. \\] Step 3: Calculating the Range The range is the horizontal distance traveled before landing: \\[ R = x(t_f) = v_0\\cos(\\theta) t_f. \\] Substituting \\(t_f\\) : \\[ R = v_0\\cos(\\theta) \\times \\frac{2v_0\\sin(\\theta)}{g}. \\] Using \\(\\sin(2\\theta) = 2\\sin(\\theta)\\cos(\\theta)\\) : \\[ R = \\frac{v_0^2\\sin(2\\theta)}{g}. \\] Step 4: Analyzing the Range Equation Effect of Angle : Maximum range occurs when \\(\\sin(2\\theta) = 1\\) , i.e., \\(\\theta = 45^\\circ\\) . The function is symmetric about \\(45^\\circ\\) , meaning angles like \\(30^\\circ\\) and \\(60^\\circ\\) yield the same range. Effect of Initial Velocity : Range increases quadratically with \\(v_0\\) . Effect of Gravity : Increasing \\(g\\) decreases range, as expected in stronger gravitational fields. import numpy as np import matplotlib.pyplot as plt # Parameters v0 = 20 # Initial velocity (m/s) g = 9.81 # Gravitational acceleration (m/s^2) angles = np.linspace(0, 90, 100) # Angles from 0 to 90 degrees radians = np.radians(angles) # Convert to radians # Compute range ranges = (v0**2 * np.sin(2 * radians)) / g # Plot results plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, label=r\"$R = \\frac{v_0^2\\sin(2\\theta)}{g}$\") plt.xlabel(\"Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Angle of Projection\") plt.legend() plt.grid() plt.show() Step 5: Practical Applications Sports : Finding the best angle for throwing a javelin or soccer ball. Engineering : Estimating landing zones for projectiles. Astronomy : Calculating trajectories of objects in space. Step 6: Model Limitations No Air Resistance : Real-world projectiles experience drag, which shortens the range. Different Heights : If launched from or landing on different heights, calculations must be adjusted. Wind Effects : Wind can increase or decrease range unpredictably. For greater accuracy, numerical methods (e.g., solving differential equations with drag) are required.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#step-1-understanding-projectile-motion","text":"Projectile motion follows two independent components: 1. Horizontal Motion : Moves at constant velocity. 2. Vertical Motion : Affected by gravity. Ignoring air resistance, we assume: - Initial velocity: \\(v_0\\) - Launch angle: \\(\\theta\\) - Gravity: \\(g\\) The goal is to find how the range depends on \\(\\theta\\) .","title":"Step 1: Understanding Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#step-2-deriving-the-equations-of-motion","text":"Using kinematic equations:","title":"Step 2: Deriving the Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion","text":"Initial horizontal velocity: $$ v_{x0} = v_0\\cos(\\theta) $$ Horizontal displacement at time \\(t\\) : $$ x(t) = v_0\\cos(\\theta) t $$","title":"Horizontal Motion:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion","text":"Initial vertical velocity: $$ v_{y0} = v_0\\sin(\\theta) $$ Vertical displacement at time \\(t\\) : $$ y(t) = v_0\\sin(\\theta) t - \\frac{1}{2}gt^2 $$ The projectile reaches the ground when \\(y = 0\\) . Solving for \\(t\\) : \\[ t_f = \\frac{2v_0\\sin(\\theta)}{g}. \\]","title":"Vertical Motion:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#step-3-calculating-the-range","text":"The range is the horizontal distance traveled before landing: \\[ R = x(t_f) = v_0\\cos(\\theta) t_f. \\] Substituting \\(t_f\\) : \\[ R = v_0\\cos(\\theta) \\times \\frac{2v_0\\sin(\\theta)}{g}. \\] Using \\(\\sin(2\\theta) = 2\\sin(\\theta)\\cos(\\theta)\\) : \\[ R = \\frac{v_0^2\\sin(2\\theta)}{g}. \\]","title":"Step 3: Calculating the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#step-4-analyzing-the-range-equation","text":"Effect of Angle : Maximum range occurs when \\(\\sin(2\\theta) = 1\\) , i.e., \\(\\theta = 45^\\circ\\) . The function is symmetric about \\(45^\\circ\\) , meaning angles like \\(30^\\circ\\) and \\(60^\\circ\\) yield the same range. Effect of Initial Velocity : Range increases quadratically with \\(v_0\\) . Effect of Gravity : Increasing \\(g\\) decreases range, as expected in stronger gravitational fields. import numpy as np import matplotlib.pyplot as plt # Parameters v0 = 20 # Initial velocity (m/s) g = 9.81 # Gravitational acceleration (m/s^2) angles = np.linspace(0, 90, 100) # Angles from 0 to 90 degrees radians = np.radians(angles) # Convert to radians # Compute range ranges = (v0**2 * np.sin(2 * radians)) / g # Plot results plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, label=r\"$R = \\frac{v_0^2\\sin(2\\theta)}{g}$\") plt.xlabel(\"Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range vs. Angle of Projection\") plt.legend() plt.grid() plt.show()","title":"Step 4: Analyzing the Range Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#step-5-practical-applications","text":"Sports : Finding the best angle for throwing a javelin or soccer ball. Engineering : Estimating landing zones for projectiles. Astronomy : Calculating trajectories of objects in space.","title":"Step 5: Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#step-6-model-limitations","text":"No Air Resistance : Real-world projectiles experience drag, which shortens the range. Different Heights : If launched from or landing on different heights, calculations must be adjusted. Wind Effects : Wind can increase or decrease range unpredictably. For greater accuracy, numerical methods (e.g., solving differential equations with drag) are required.","title":"Step 6: Model Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 Step 1: Theoretical Foundation We consider the equation for a forced damped pendulum: \\[\\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = A\\cos(\\omega t)\\] This includes damping \\(b\\) , gravity \\(g\\) , length \\(L\\) , and periodic forcing \\(A\\cos(\\omega t)\\) . To solve it numerically, we rewrite it as a system of first-order ODEs. Step 1.1: Approximate Solution for Small-Angle Oscillations To simplify the analysis, we consider the small-angle approximation: \\[\\sin\\theta \\approx \\theta\\] Substituting this into the original equation gives a linear second-order nonhomogeneous differential equation: \\[\\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = A\\cos(\\omega t)\\] This is a standard linear ODE with constant coefficients and a cosine forcing term. The general solution consists of two parts: 1. Homogeneous Solution Solve the homogeneous equation: \\[\\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = 0\\] Assume a solution of the form \\(\\theta_h(t) = e^{\\lambda t}\\) : Then: \\[\\lambda^2 + b\\lambda + \\frac{g}{L} = 0\\] Solve the characteristic equation: If the discriminant \\(D = b^2 - 4\\frac{g}{L} > 0\\) : overdamped If \\(D = 0\\) : critically damped If \\(D < 0\\) : underdamped (oscillatory), which gives: \\[\\theta_h(t) = e^{-\\frac{b}{2}t}(C_1\\cos(\\omega_0 t) + C_2\\sin(\\omega_0 t))\\] where: \\[\\omega_0 = \\sqrt{\\frac{g}{L} - \\frac{b^2}{4}}\\] 2. Particular Solution Assume a solution of the form: \\[\\theta_p(t) = B\\cos(\\omega t) + C\\sin(\\omega t)\\] Plug into the ODE and match coefficients. After simplification: The steady-state solution is: \\[\\theta_p(t) = \\frac{A}{\\sqrt{(\\frac{g}{L} - \\omega^2)^2 + (b\\omega)^2}} \\cos(\\omega t - \\delta)\\] where the phase shift \\(\\delta\\) is given by: \\[\\tan(\\delta) = \\frac{b\\omega}{\\frac{g}{L} - \\omega^2}\\] Final Approximate Solution: Combining both parts: \\[\\theta(t) = \\theta_h(t) + \\theta_p(t)\\] In the long term, the homogeneous part decays due to damping, and the system reaches a steady-state periodic solution with amplitude and phase depending on \\(A\\) , \\(b\\) , \\(\\omega\\) , and \\(\\frac{g}{L}\\) . This approximation is useful for analyzing resonance and predicting the system\u2019s response under small displacements. Step 2: System of Equations. Analysis of Dynamics: Let: \\(x_1 = \\theta\\) \\(x_2 = \\frac{d\\theta}{dt}\\) Then: \\[\\frac{dx_1}{dt} = x_2$$ $$\\frac{dx_2}{dt} = -b x_2 - \\frac{g}{L} \\sin(x_1) + A \\cos(\\omega t)\\] Step 3: Angle and Phase Space Simulation The forced damped pendulum model is relevant to various engineering and physical systems. Some real-world examples include: Energy harvesting systems , where mechanical vibrations are converted into electrical energy using oscillating parts. Suspension bridges , where damping and periodic forces play a role in stabilizing the structure under wind or traffic loads. Oscillating electrical circuits (e.g., RLC circuits), which behave analogously to mechanical oscillators with damping and driving forces. Biomechanics , such as modeling the motion of limbs or joints under muscle activation and external load. Step 4: Poincar\u00e9 Section Python Code: Combined Pendulum Plots (\u03b8(t), \u03c9(t), Phase Portrait) python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 L = 1.0 b = 0.3 A = 1.2 w = 2.0 # Initial conditions theta0 = 0.2 omega0 = 0.0 y0 = [theta0, omega0] # Time setup t_start = 0 t_end = 20 num_points = 5000 t_vals = np.linspace(t_start, t_end, num_points) # Define the system def pendulum(t, y): theta = y[0] omega = y[1] dtheta_dt = omega domega_dt = -b * omega - (g / L) * np.sin(theta) + A * np.cos(w * t) return [dtheta_dt, domega_dt] # Solve the system sol = solve_ivp(pendulum, [t_start, t_end], y0, t_eval=t_vals) theta = sol.y[0] omega = sol.y[1] time = sol.t # Plot results in subplots fig, axs = plt.subplots(2, 2, figsize=(12, 8)) fig.suptitle('Forced Damped Pendulum Simulation', fontsize=16) # \u03b8(t) axs[0, 0].plot(time, theta, label='\u03b8(t)', color='royalblue') axs[0, 0].set_title('Angle vs Time') axs[0, 0].set_xlabel('Time (s)') axs[0, 0].set_ylabel('Angle \u03b8 (rad)') axs[0, 0].grid(True) axs[0, 0].legend() # \u03c9(t) axs[0, 1].plot(time, omega, label='d\u03b8/dt(t)', color='orange') axs[0, 1].set_title('Angular Velocity vs Time') axs[0, 1].set_xlabel('Time (s)') axs[0, 1].set_ylabel('Angular Velocity (rad/s)') axs[0, 1].grid(True) axs[0, 1].legend() # Phase portrait: \u03c9 vs \u03b8 axs[1, 0].plot(theta, omega, label='Phase Portrait', color='steelblue') axs[1, 0].set_title('Phase Portrait') axs[1, 0].set_xlabel('Angle \u03b8 (rad)') axs[1, 0].set_ylabel('Angular Velocity d\u03b8/dt (rad/s)') axs[1, 0].grid(True) axs[1, 0].legend() # Hide unused subplot axs[1, 1].axis('off') plt.tight_layout(rect=[0, 0, 1, 0.96]) plt.show() Explanation of the Code Parameters : The script defines physical parameters including \\(g\\) (gravity), \\(L\\) (length), \\(b\\) (damping), \\(A\\) (amplitude of forcing), and \\(\\omega\\) (driving frequency). ODE System : The nonlinear second-order differential equation is rewritten as a system of first-order ODEs: $$ \\frac{d\\theta}{dt} = \\omega, \\quad \\frac{d\\omega}{dt} = -b\\omega - \\frac{g}{L} \\sin\\theta + A \\cos(\\omega t) $$ Numerical Solution : The system is solved using solve_ivp from scipy.integrate , which implements a Runge-Kutta method with adaptive time stepping. Plots : \\(\\theta(t)\\) \u2014 Angle over time \\(\\dot{\\theta}(t)\\) \u2014 Angular velocity over time Phase portrait \u2014 \\(\\dot{\\theta}\\) vs. \\(\\theta\\)","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#step-1-theoretical-foundation","text":"We consider the equation for a forced damped pendulum: \\[\\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\sin\\theta = A\\cos(\\omega t)\\] This includes damping \\(b\\) , gravity \\(g\\) , length \\(L\\) , and periodic forcing \\(A\\cos(\\omega t)\\) . To solve it numerically, we rewrite it as a system of first-order ODEs.","title":"Step 1: Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#step-11-approximate-solution-for-small-angle-oscillations","text":"To simplify the analysis, we consider the small-angle approximation: \\[\\sin\\theta \\approx \\theta\\] Substituting this into the original equation gives a linear second-order nonhomogeneous differential equation: \\[\\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = A\\cos(\\omega t)\\] This is a standard linear ODE with constant coefficients and a cosine forcing term. The general solution consists of two parts:","title":"Step 1.1: Approximate Solution for Small-Angle Oscillations"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-homogeneous-solution","text":"Solve the homogeneous equation: \\[\\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\frac{g}{L}\\theta = 0\\] Assume a solution of the form \\(\\theta_h(t) = e^{\\lambda t}\\) : Then: \\[\\lambda^2 + b\\lambda + \\frac{g}{L} = 0\\] Solve the characteristic equation: If the discriminant \\(D = b^2 - 4\\frac{g}{L} > 0\\) : overdamped If \\(D = 0\\) : critically damped If \\(D < 0\\) : underdamped (oscillatory), which gives: \\[\\theta_h(t) = e^{-\\frac{b}{2}t}(C_1\\cos(\\omega_0 t) + C_2\\sin(\\omega_0 t))\\] where: \\[\\omega_0 = \\sqrt{\\frac{g}{L} - \\frac{b^2}{4}}\\]","title":"1. Homogeneous Solution"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-particular-solution","text":"Assume a solution of the form: \\[\\theta_p(t) = B\\cos(\\omega t) + C\\sin(\\omega t)\\] Plug into the ODE and match coefficients. After simplification: The steady-state solution is: \\[\\theta_p(t) = \\frac{A}{\\sqrt{(\\frac{g}{L} - \\omega^2)^2 + (b\\omega)^2}} \\cos(\\omega t - \\delta)\\] where the phase shift \\(\\delta\\) is given by: \\[\\tan(\\delta) = \\frac{b\\omega}{\\frac{g}{L} - \\omega^2}\\]","title":"2. Particular Solution"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#final-approximate-solution","text":"Combining both parts: \\[\\theta(t) = \\theta_h(t) + \\theta_p(t)\\] In the long term, the homogeneous part decays due to damping, and the system reaches a steady-state periodic solution with amplitude and phase depending on \\(A\\) , \\(b\\) , \\(\\omega\\) , and \\(\\frac{g}{L}\\) . This approximation is useful for analyzing resonance and predicting the system\u2019s response under small displacements.","title":"Final Approximate Solution:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#step-2-system-of-equations-analysis-of-dynamics","text":"Let: \\(x_1 = \\theta\\) \\(x_2 = \\frac{d\\theta}{dt}\\) Then: \\[\\frac{dx_1}{dt} = x_2$$ $$\\frac{dx_2}{dt} = -b x_2 - \\frac{g}{L} \\sin(x_1) + A \\cos(\\omega t)\\]","title":"Step 2: System of Equations. Analysis of Dynamics:"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#step-3-angle-and-phase-space-simulation","text":"The forced damped pendulum model is relevant to various engineering and physical systems. Some real-world examples include: Energy harvesting systems , where mechanical vibrations are converted into electrical energy using oscillating parts. Suspension bridges , where damping and periodic forces play a role in stabilizing the structure under wind or traffic loads. Oscillating electrical circuits (e.g., RLC circuits), which behave analogously to mechanical oscillators with damping and driving forces. Biomechanics , such as modeling the motion of limbs or joints under muscle activation and external load.","title":"Step 3: Angle and Phase Space Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#step-4-poincare-section","text":"Python Code: Combined Pendulum Plots (\u03b8(t), \u03c9(t), Phase Portrait) python import numpy as np import matplotlib.pyplot as plt from scipy.integrate import solve_ivp # Parameters g = 9.81 L = 1.0 b = 0.3 A = 1.2 w = 2.0 # Initial conditions theta0 = 0.2 omega0 = 0.0 y0 = [theta0, omega0] # Time setup t_start = 0 t_end = 20 num_points = 5000 t_vals = np.linspace(t_start, t_end, num_points) # Define the system def pendulum(t, y): theta = y[0] omega = y[1] dtheta_dt = omega domega_dt = -b * omega - (g / L) * np.sin(theta) + A * np.cos(w * t) return [dtheta_dt, domega_dt] # Solve the system sol = solve_ivp(pendulum, [t_start, t_end], y0, t_eval=t_vals) theta = sol.y[0] omega = sol.y[1] time = sol.t # Plot results in subplots fig, axs = plt.subplots(2, 2, figsize=(12, 8)) fig.suptitle('Forced Damped Pendulum Simulation', fontsize=16) # \u03b8(t) axs[0, 0].plot(time, theta, label='\u03b8(t)', color='royalblue') axs[0, 0].set_title('Angle vs Time') axs[0, 0].set_xlabel('Time (s)') axs[0, 0].set_ylabel('Angle \u03b8 (rad)') axs[0, 0].grid(True) axs[0, 0].legend() # \u03c9(t) axs[0, 1].plot(time, omega, label='d\u03b8/dt(t)', color='orange') axs[0, 1].set_title('Angular Velocity vs Time') axs[0, 1].set_xlabel('Time (s)') axs[0, 1].set_ylabel('Angular Velocity (rad/s)') axs[0, 1].grid(True) axs[0, 1].legend() # Phase portrait: \u03c9 vs \u03b8 axs[1, 0].plot(theta, omega, label='Phase Portrait', color='steelblue') axs[1, 0].set_title('Phase Portrait') axs[1, 0].set_xlabel('Angle \u03b8 (rad)') axs[1, 0].set_ylabel('Angular Velocity d\u03b8/dt (rad/s)') axs[1, 0].grid(True) axs[1, 0].legend() # Hide unused subplot axs[1, 1].axis('off') plt.tight_layout(rect=[0, 0, 1, 0.96]) plt.show()","title":"Step 4: Poincar\u00e9 Section"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#explanation-of-the-code","text":"Parameters : The script defines physical parameters including \\(g\\) (gravity), \\(L\\) (length), \\(b\\) (damping), \\(A\\) (amplitude of forcing), and \\(\\omega\\) (driving frequency). ODE System : The nonlinear second-order differential equation is rewritten as a system of first-order ODEs: $$ \\frac{d\\theta}{dt} = \\omega, \\quad \\frac{d\\omega}{dt} = -b\\omega - \\frac{g}{L} \\sin\\theta + A \\cos(\\omega t) $$ Numerical Solution : The system is solved using solve_ivp from scipy.integrate , which implements a Runge-Kutta method with adaptive time stepping. Plots : \\(\\theta(t)\\) \u2014 Angle over time \\(\\dot{\\theta}(t)\\) \u2014 Angular velocity over time Phase portrait \u2014 \\(\\dot{\\theta}\\) vs. \\(\\theta\\)","title":"Explanation of the Code"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}